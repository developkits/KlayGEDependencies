diff -u -r boost/interprocess/detail/win32_api.hpp boost/interprocess/detail/win32_api.hpp
--- boost/interprocess/detail/win32_api.hpp
+++ boost/interprocess/detail/win32_api.hpp
@@ -18,6 +18,7 @@
 #include <boost/interprocess/detail/config_begin.hpp>
 #include <boost/interprocess/detail/workaround.hpp>
 #include <boost/date_time/filetime_functions.hpp>
+#include <boost/predef/platform.h>
 #include <cstddef>
 #include <cstring>
 #include <cstdlib>
@@ -35,6 +36,7 @@
 #include <Shlobj.h>
 #endif
 
+#if BOOST_PLAT_WINDOWS_DESKTOP
 #if defined(_MSC_VER)
 #  pragma once
 #  pragma comment( lib, "Advapi32.lib" )
@@ -43,6 +45,7 @@
 #  pragma comment( lib, "Psapi.lib" )
 #  pragma comment( lib, "Shell32.lib" )   //SHGetSpecialFolderPathA
 #endif
+#endif
 
 #if defined (BOOST_INTERPROCESS_WINDOWS)
 #  include <cstdarg>
@@ -876,6 +879,7 @@
 extern "C" __declspec(dllimport) int __stdcall ReleaseSemaphore(void *, long, long *);
 extern "C" __declspec(dllimport) void * __stdcall OpenSemaphoreA(unsigned long, int, const char *);
 extern "C" __declspec(dllimport) void * __stdcall CreateFileMappingA (void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *);
+extern "C" __declspec(dllimport) void * __stdcall CreateFileMappingW (void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const wchar_t *);
 extern "C" __declspec(dllimport) void * __stdcall MapViewOfFileEx (void *, unsigned long, unsigned long, unsigned long, std::size_t, void*);
 extern "C" __declspec(dllimport) void * __stdcall OpenFileMappingA (unsigned long, int, const char *);
 extern "C" __declspec(dllimport) void * __stdcall CreateFileA (const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *);
@@ -911,6 +915,7 @@
 extern "C" __declspec(dllimport) farproc_t __stdcall GetProcAddress(void *, const char*);
 extern "C" __declspec(dllimport) hmodule __stdcall GetModuleHandleA(const char*);
 extern "C" __declspec(dllimport) void *__stdcall GetFileInformationByHandle(void *, interprocess_by_handle_file_information*);
+extern "C" __declspec(dllimport) int __stdcall MultiByteToWideChar(unsigned long, unsigned long, const char*, int, wchar_t*, int);
 
 //Advapi32.dll
 extern "C" __declspec(dllimport) long __stdcall RegOpenKeyExA(hkey, const char *, unsigned long, unsigned long, hkey*);
@@ -1129,6 +1134,8 @@
 const unsigned long max_record_buffer_size = 0x10000L;   // 64K
 const unsigned long max_path = 260;
 
+const unsigned long cp_acp = 0;           // default to ANSI code page
+
 //Keys
 static const  hkey hkey_local_machine = (hkey)(unsigned long*)(long)(0x80000002);
 static unsigned long key_query_value    = 0x0001;
@@ -1300,10 +1307,12 @@
    interprocess_all_access_security()
       : initialized(false)
    {
+#if BOOST_PLAT_WINDOWS_DESKTOP
       if(!InitializeSecurityDescriptor(&sd, security_descriptor_revision))
          return;
       if(!SetSecurityDescriptorDacl(&sd, true, 0, false))
          return;
+#endif
       sa.lpSecurityDescriptor = &sd;
       sa.nLength = sizeof(interprocess_security_attributes);
       sa.bInheritHandle = false;
@@ -1311,13 +1320,24 @@
    }
 
    interprocess_security_attributes *get_attributes()
+#if BOOST_PLAT_WINDOWS_DESKTOP
    {  return &sa; }
+#else
+   {  return NULL; }
+#endif
 };
 
 inline void * create_file_mapping (void * handle, unsigned long access, unsigned __int64 file_offset, const char * name, interprocess_security_attributes *psec)
 {
    const unsigned long high_size(file_offset >> 32), low_size((boost::uint32_t)file_offset);
+#if BOOST_PLAT_WINDOWS_DESKTOP
    return CreateFileMappingA (handle, psec, access, high_size, low_size, name);
+#else
+   int const wcs_len = MultiByteToWideChar(cp_acp, 0, name, static_cast<int>(strlen(name)), 0, 0);
+   std::vector<wchar_t> wname(wcs_len + 1);
+   MultiByteToWideChar(cp_acp, 0, name, static_cast<int>(strlen(name)), &wname[0], wcs_len);
+   return CreateFileMappingW (handle, psec, access, high_size, low_size, &wname[0]);
+#endif
 }
 
 inline void * open_file_mapping (unsigned long access, const char *name)
@@ -1526,7 +1546,7 @@
    }
 
    public:
-   static farproc_t get(const unsigned int id)
+   static void *get(const unsigned int id)
    {
       BOOST_ASSERT(id < (unsigned int)NumFunction);
       for(unsigned i = 0; FunctionStates[id] < 2; ++i){
@@ -1542,7 +1562,7 @@
             sleep_tick();
          }
       }
-      return FunctionAddresses[id];
+      return reinterpret_cast<void*>(FunctionAddresses[id]);
    }
 };
 
diff -u -r boost/interprocess/errors.hpp boost/interprocess/errors.hpp
--- boost/interprocess/errors.hpp
+++ boost/interprocess/errors.hpp
@@ -63,6 +63,7 @@
 #if defined (BOOST_INTERPROCESS_WINDOWS)
 inline void fill_system_message(int sys_err_code, std::string &str)
 {
+#if BOOST_PLAT_WINDOWS_DESKTOP
    void *lpMsgBuf;
    winapi::format_message(
       winapi::format_message_allocate_buffer |
@@ -77,6 +78,21 @@
    );
    str += static_cast<const char*>(lpMsgBuf);
    winapi::local_free( lpMsgBuf ); // free the buffer
+#else
+   char buf[256];
+   void *lpMsgBuf = buf;
+   winapi::format_message(
+      winapi::format_message_from_system |
+      winapi::format_message_ignore_inserts,
+      0,
+      sys_err_code,
+      winapi::make_lang_id(winapi::lang_neutral, winapi::sublang_default), // Default language
+      reinterpret_cast<char *>(&lpMsgBuf),
+      sizeof(buf),
+      0
+   );
+   str += static_cast<const char*>(lpMsgBuf);
+#endif
    while ( str.size()
       && (str[str.size()-1] == '\n' || str[str.size()-1] == '\r') )
       str.erase( str.size()-1 );
diff -u -r boost/program_options/value_semantic.hpp boost/program_options/value_semantic.hpp
--- boost/program_options/value_semantic.hpp
+++ boost/program_options/value_semantic.hpp
@@ -12,11 +12,11 @@
 #include <boost/any.hpp>
 #include <boost/function/function1.hpp>
 #include <boost/lexical_cast.hpp>
+#include <boost/type_index.hpp>
 
 
 #include <string>
 #include <vector>
-#include <typeinfo>
 
 namespace boost { namespace program_options {
 
@@ -167,7 +167,7 @@
     public:
         // Returns the type of the value described by this
         // object.
-        virtual const std::type_info& value_type() const = 0;
+        virtual const boost::typeindex::type_info& value_type() const = 0;
         // Not really needed, since deletion from this
         // class is silly, but just in case.
         virtual ~typed_value_base() {}
@@ -350,9 +350,9 @@
 
     public: // typed_value_base overrides
         
-        const std::type_info& value_type() const
+        const boost::typeindex::type_info& value_type() const
         {
-            return typeid(T);
+            return boost::typeindex::type_id<T>().type_info();
         }
         
 
diff -u -r boost/test/unit_test_suite_impl.hpp boost/test/unit_test_suite_impl.hpp
--- boost/test/unit_test_suite_impl.hpp
+++ boost/test/unit_test_suite_impl.hpp
@@ -30,9 +30,9 @@
 #include <boost/mpl/identity.hpp>
 #include <boost/type.hpp>
 #include <boost/type_traits/is_const.hpp>
+#include <boost/type_index.hpp>
 
 // STL
-#include <typeinfo> // for typeid
 #include <string>   // for std::string
 #include <list>     // for std::list
 #include <vector>   // for std::vector
@@ -374,7 +374,7 @@
         std::string full_name;
         assign_op( full_name, m_test_case_name, 0 );
         full_name += '<';
-        full_name += typeid(TestType).name();
+        full_name += boost::typeindex::type_id<TestType>().pretty_name();
         if( boost::is_const<TestType>::value )
             full_name += " const";
         full_name += '>';
diff -u -r boost/test/utils/runtime/interpret_argument_value.hpp boost/test/utils/runtime/interpret_argument_value.hpp
--- boost/test/utils/runtime/interpret_argument_value.hpp
+++ boost/test/utils/runtime/interpret_argument_value.hpp
@@ -26,6 +26,7 @@
 // Boost
 #include <boost/optional.hpp>
 #include <boost/lexical_cast.hpp>
+#include <boost/type_index.hpp>
 
 // STL
 // !! could we eliminate these includes?
@@ -45,7 +46,7 @@
 struct interpret_argument_value_impl {
     static bool _( cstring source, boost::optional<T>& res )
     {
-        BOOST_RT_PARAM_TRACE( "In interpret_argument_value_impl<" << typeid(T).name() << ">" );
+        BOOST_RT_PARAM_TRACE( "In interpret_argument_value_impl<" << boost::typeindex::type_id<T>().pretty_name() << ">" );
 
         res = lexical_cast<T>( source );
 
diff -u -r boost/thread/pthread/thread_data.hpp boost/thread/pthread/thread_data.hpp
--- boost/thread/pthread/thread_data.hpp
+++ boost/thread/pthread/thread_data.hpp
@@ -25,7 +25,7 @@
 #include <utility>
 
 #if defined(__ANDROID__)
-#include <asm/page.h> // http://code.google.com/p/android/issues/detail?id=39983
+#include <limits.h> // http://code.google.com/p/android/issues/detail?id=39983
 #endif
 
 #include <pthread.h>
diff -u -r boost/thread/win32/thread_primitives.hpp boost/thread/win32/thread_primitives.hpp
--- boost/thread/win32/thread_primitives.hpp
+++ boost/thread/win32/thread_primitives.hpp
@@ -218,6 +218,7 @@
         {
             namespace detail { typedef int (__stdcall *farproc_t)(); typedef ticks_type (__stdcall *gettickcount64_t)(); }
 #if !BOOST_PLAT_WINDOWS_RUNTIME
+#if !defined( BOOST_USE_WINDOWS_H )
             extern "C"
             {
                 __declspec(dllimport) detail::farproc_t __stdcall GetProcAddress(void *, const char *);
@@ -237,6 +238,7 @@
 #define _InterlockedCompareExchange InterlockedCompareExchange
 #endif
             }
+#endif
             // Borrowed from https://stackoverflow.com/questions/8211820/userland-interrupt-timer-access-such-as-via-kequeryinterrupttime-or-similar
             inline ticks_type __stdcall GetTickCount64emulation()
             {
@@ -298,7 +300,7 @@
 #if BOOST_PLAT_WINDOWS_RUNTIME
                 gettickcount64impl = &GetTickCount64;
 #else               
-                detail::farproc_t addr=GetProcAddress(
+                detail::farproc_t addr=(detail::farproc_t)GetProcAddress(
 #if !defined(BOOST_NO_ANSI_APIS)
                     GetModuleHandleA("KERNEL32.DLL"),
 #else
-- 
1.9.4.msysgit.2

